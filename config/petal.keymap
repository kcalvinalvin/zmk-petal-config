#define ZMK_MOUSE_DEFAULT_MOVE_VAL 950
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 1

#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define MOUSE   3

&msc {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <500>;      // 300
    delay-ms = <0>;
};

&mmv {
    acceleration-exponent = <1>;      // 1
    time-to-max-speed-ms = <300>;     // 300
    delay-ms = <0>;                   // 0
};

&soft_off {
    hold-time-ms = <500>; // Only turn off it the key is held for 5 seconds or longer.
};

/ {
    combos {
        compatible = "zmk,combos";

        mouse_layer_combo {
            bindings = <&to 3>;
            key-positions = <31 34>;
        };
    };

    behaviors {
        enter_dance: enter_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings =
                <&auto_shift_short QUESTION ENTER>,
                <&auto_shift_short LS(ENTER) SLASH>;

            tapping-term-ms = <200>;
        };

        space_tab: space_tab {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp TAB>;
        };

        lower_taptoggle: lower_taptoggle {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&to 2>;
        };

        bootloader_tap: bootloader_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&none>, <&bootloader>;
        };

        auto_shift: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
        };

        semi_colon_app_tap: semi_colon_app_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings =
                <&auto_shift_short LS(SEMI) SEMI>,
                <&auto_shift_short LS(APOSTROPHE) APOSTROPHE>;

            tapping-term-ms = <200>;
        };

        control_gui_tap_dance: control_gui_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL>, <&kp LEFT_COMMAND>;
        };

        auto_shift_short: auto_shift_short {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "tap-preferred";
        };

        mo1_sl4: mo1_sl4 {
            compatible = "zmk,behavior-tap-dance";
            label = "MO1_SL4";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&sl 4>;
        };

        caps_word_hold: caps_word_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_WORD_HOLD";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&auto_shift LS(Q) Q  &auto_shift LS(W) W  &auto_shift LS(E) E     &auto_shift LS(R) R  &auto_shift LS(T) T    &auto_shift LS(Y) Y  &auto_shift LS(U) U  &auto_shift LS(I) I          &auto_shift LS(O) O      &auto_shift LS(P) P
&auto_shift LS(A) A  &auto_shift LS(S) S  &auto_shift LS(D) D     &auto_shift LS(F) F  &auto_shift LS(G) G    &auto_shift LS(H) H  &auto_shift LS(J) J  &auto_shift LS(K) K          &auto_shift LS(L) L      &semi_colon_app_tap
&auto_shift LS(Z) Z  &auto_shift LS(X) X  &auto_shift LS(C) C     &auto_shift LS(V) V  &auto_shift LS(B) B    &auto_shift LS(N) N  &auto_shift LS(M) M  &auto_shift LS(COMMA) COMMA  &auto_shift LS(DOT) DOT  &enter_dance
                                          &control_gui_tap_dance  &mo1_sl4             &kp BACKSPACE          &space_tab           &lower_taptoggle     &kp LEFT_ALT
            >;
        };

        raise_layer {
            bindings = <
&auto_shift TILDE ESCAPE           &kp K_MUTE                         &kp C_VOLUME_DOWN                  &kp C_VOLUME_UP                    &kp LEFT_PARENTHESIS     &kp RIGHT_PARENTHESIS              &kp C_BRIGHTNESS_DEC   &kp C_BRIGHTNESS_INC                       &auto_shift LS(MINUS) MINUS                  &auto_shift LS(EQUAL) EQUAL
&auto_shift LS(NUMBER_1) NUMBER_1  &auto_shift LS(NUMBER_2) NUMBER_2  &auto_shift LS(NUMBER_3) NUMBER_3  &auto_shift LS(NUMBER_4) NUMBER_4  &auto_shift LS(N5) N5    &auto_shift LS(NUMBER_6) NUMBER_6  &auto_shift LS(N7) N7  &auto_shift LS(N8) N8                      &auto_shift LS(N9) N9                        &auto_shift LS(N0) N0
&caps_word_hold LEFT_SHIFT 0       &kp K_PREV                         &kp K_PP                           &kp K_NEXT                         &kp LEFT_BRACE           &kp RIGHT_BRACE                    &trans                 &auto_shift LS(LEFT_BRACKET) LEFT_BRACKET  &auto_shift LS(RIGHT_BRACKET) RIGHT_BRACKET  &auto_shift LS(BACKSLASH) BACKSLASH
                                                                      &kp LEFT_CONTROL                   &trans                             &kp BACKSPACE            &kp TAB                            &trans                 &trans
            >;
        };

        lower_layer {
            bindings = <
&kp GRAVE     &trans        &kp UP_ARROW  &trans        &bootloader_tap    &soft_off  &auto_shift LS(N7) N7              &auto_shift LS(N8) N8              &auto_shift LS(N9) N9              &trans
&trans        &kp LEFT      &kp DOWN      &kp RIGHT     &trans             &trans     &auto_shift LS(NUMBER_4) NUMBER_4  &auto_shift LS(N5) N5              &auto_shift LS(NUMBER_6) NUMBER_6  &trans
&trans        &trans        &bt BT_PRV  &bt BT_NXT  &bt BT_CLR         &trans     &auto_shift LS(NUMBER_1) NUMBER_1  &auto_shift LS(NUMBER_2) NUMBER_2  &auto_shift LS(NUMBER_3) NUMBER_3  &trans
                            &trans        &to 0         &kp DELETE         &kp SPACE  &to 0                              &auto_shift LS(N0) N0
            >;
        };

        mouse_layer {
            bindings = <
&trans                  &trans          &mmv MOVE_UP    &trans           &msc MOVE_UP      &trans     &trans          &kp UP_ARROW    &trans           &trans
&control_gui_tap_dance  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc MOVE_DOWN    &trans     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&kp LEFT_SHIFT          &trans          &mkp MB3        &trans           &trans            &mkp MB3   &trans          &trans          &trans           &trans
                                        &trans          &to 0            &mkp RCLK         &mkp LCLK  &to 0           &trans
            >;
        };

        function_layer {
            bindings = <
&trans          &trans  &trans                  &trans  &trans    &trans   &trans   &trans        &trans  &trans
&kp F1          &kp F2  &kp F3                  &kp F4  &kp F5    &kp F6   &kp F7   &kp F8        &kp F9  &kp F10
&kp LEFT_SHIFT  &trans  &trans                  &trans  &trans    &kp F11  &kp F12  &trans        &trans  &trans
                        &control_gui_tap_dance  &to 0   &trans    &trans   &trans   &kp LEFT_ALT
            >;
        };

        extra1 { status = "reserved"; };

        extra2 { status = "reserved"; };

        extra3 { status = "reserved"; };
    };
};

&pinctrl {
    spi0_default: spi0_default {
        group1 {
            psels =
                <NRF_PSEL(SPIM_SCK, 0, 17)>,
                <NRF_PSEL(SPIM_MOSI, 0, 20)>,
                <NRF_PSEL(SPIM_MISO, 0, 25)>;
        };
    };

    spi0_sleep: spi0_sleep {
        group1 {
            psels =
                <NRF_PSEL(SPIM_SCK, 0, 17)>,
                <NRF_PSEL(SPIM_MOSI, 0, 20)>,
                <NRF_PSEL(SPIM_MISO, 0, 25)>;

            low-power-enable;
        };
    };
};
